// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRACE_FUZZTRACE_H_
#define FLATBUFFERS_GENERATED_TRACE_FUZZTRACE_H_

#include "flatbuffers/flatbuffers.h"

namespace FuzzTrace {

struct Input;
struct InputBuilder;

struct Input FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef InputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FACE = 4,
    VT_INTEREST = 6,
    VT_DATA = 8,
    VT_PREFIX = 10
  };
  const flatbuffers::String *face() const {
    return GetPointer<const flatbuffers::String *>(VT_FACE);
  }
  const flatbuffers::Vector<uint8_t> *interest() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_INTEREST);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  const flatbuffers::String *prefix() const {
    return GetPointer<const flatbuffers::String *>(VT_PREFIX);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FACE) &&
           verifier.VerifyString(face()) &&
           VerifyOffset(verifier, VT_INTEREST) &&
           verifier.VerifyVector(interest()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           VerifyOffset(verifier, VT_PREFIX) &&
           verifier.VerifyString(prefix()) &&
           verifier.EndTable();
  }
};

struct InputBuilder {
  typedef Input Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_face(flatbuffers::Offset<flatbuffers::String> face) {
    fbb_.AddOffset(Input::VT_FACE, face);
  }
  void add_interest(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> interest) {
    fbb_.AddOffset(Input::VT_INTEREST, interest);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Input::VT_DATA, data);
  }
  void add_prefix(flatbuffers::Offset<flatbuffers::String> prefix) {
    fbb_.AddOffset(Input::VT_PREFIX, prefix);
  }
  explicit InputBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Input> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Input>(end);
    return o;
  }
};

inline flatbuffers::Offset<Input> CreateInput(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> face = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> interest = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0,
    flatbuffers::Offset<flatbuffers::String> prefix = 0) {
  InputBuilder builder_(_fbb);
  builder_.add_prefix(prefix);
  builder_.add_data(data);
  builder_.add_interest(interest);
  builder_.add_face(face);
  return builder_.Finish();
}

inline flatbuffers::Offset<Input> CreateInputDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *face = nullptr,
    const std::vector<uint8_t> *interest = nullptr,
    const std::vector<uint8_t> *data = nullptr,
    const char *prefix = nullptr) {
  auto face__ = face ? _fbb.CreateString(face) : 0;
  auto interest__ = interest ? _fbb.CreateVector<uint8_t>(*interest) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  auto prefix__ = prefix ? _fbb.CreateString(prefix) : 0;
  return FuzzTrace::CreateInput(
      _fbb,
      face__,
      interest__,
      data__,
      prefix__);
}

}  // namespace FuzzTrace

#endif  // FLATBUFFERS_GENERATED_TRACE_FUZZTRACE_H_
