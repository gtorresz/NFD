// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INITALIZATION_FUZZTRACE_H_
#define FLATBUFFERS_GENERATED_INITALIZATION_FUZZTRACE_H_

#include "flatbuffers/flatbuffers.h"

namespace FuzzTrace {

struct Initial;
struct InitialBuilder;

struct Initial FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef InitialBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SEED = 4,
    VT_PREFIXES = 6,
    VT_FACES = 8,
    VT_STRATEGIES = 10
  };
  uint32_t seed() const {
    return GetField<uint32_t>(VT_SEED, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *prefixes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_PREFIXES);
  }
  const flatbuffers::Vector<int32_t> *faces() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_FACES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *strategies() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_STRATEGIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SEED) &&
           VerifyOffset(verifier, VT_PREFIXES) &&
           verifier.VerifyVector(prefixes()) &&
           verifier.VerifyVectorOfStrings(prefixes()) &&
           VerifyOffset(verifier, VT_FACES) &&
           verifier.VerifyVector(faces()) &&
           VerifyOffset(verifier, VT_STRATEGIES) &&
           verifier.VerifyVector(strategies()) &&
           verifier.VerifyVectorOfStrings(strategies()) &&
           verifier.EndTable();
  }
};

struct InitialBuilder {
  typedef Initial Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_seed(uint32_t seed) {
    fbb_.AddElement<uint32_t>(Initial::VT_SEED, seed, 0);
  }
  void add_prefixes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> prefixes) {
    fbb_.AddOffset(Initial::VT_PREFIXES, prefixes);
  }
  void add_faces(flatbuffers::Offset<flatbuffers::Vector<int32_t>> faces) {
    fbb_.AddOffset(Initial::VT_FACES, faces);
  }
  void add_strategies(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> strategies) {
    fbb_.AddOffset(Initial::VT_STRATEGIES, strategies);
  }
  explicit InitialBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Initial> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Initial>(end);
    return o;
  }
};

inline flatbuffers::Offset<Initial> CreateInitial(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t seed = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> prefixes = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> faces = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> strategies = 0) {
  InitialBuilder builder_(_fbb);
  builder_.add_strategies(strategies);
  builder_.add_faces(faces);
  builder_.add_prefixes(prefixes);
  builder_.add_seed(seed);
  return builder_.Finish();
}

inline flatbuffers::Offset<Initial> CreateInitialDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t seed = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *prefixes = nullptr,
    const std::vector<int32_t> *faces = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *strategies = nullptr) {
  auto prefixes__ = prefixes ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*prefixes) : 0;
  auto faces__ = faces ? _fbb.CreateVector<int32_t>(*faces) : 0;
  auto strategies__ = strategies ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*strategies) : 0;
  return FuzzTrace::CreateInitial(
      _fbb,
      seed,
      prefixes__,
      faces__,
      strategies__);
}

}  // namespace FuzzTrace

#endif  // FLATBUFFERS_GENERATED_INITALIZATION_FUZZTRACE_H_
